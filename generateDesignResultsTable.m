% study_PTOsizing.m script m-file
% AUTHORS:
% Jeremy Simmons (email: simmo536@umn.edu)
% University of Minnesota
% Department of Mechanical Engineering
%
% CREATION DATE:
% December 31, 2021
%
% PURPOSE:
% The purpose of this script is to generate a table showing design
% parameters for each sea state given a specific maximum pump displacement 
% and RO module membrane area. This is perfromed on data generated by the
% script "study_PTOsizing.m".
%
% FILE DEPENDENCIES:
%
% UPDATES
% 12/31/2021 - created.
%
% Copyright (C) 2022  Jeremy W. Simmons II
% 
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
% 
%   You should have received a copy of the GNU General Public License
%   along with this program. If not, see <https://www.gnu.org/licenses/>.
%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
iPTO = 7;
D_wChoice = .261;
S_roChoice = 2774;

studyType = 2; % selection for the type of study that was perfromed
               % 1 - 1D, pump displacement
               % 2 - 2D

SSsetType = 2; % selection for set of sea states to display
               % 1-all in order by ID
               % 2-all in random order
               % 3-top 90% by yearly power in random order
               % 4-top 80% by yearly power in random order
               % 5-bottom 20% by yearly power in random order
               % 6-bottom 10% by yearly power in random order

% load data if not already loaded
if ~(exist('iiPTO','var') && iiPTO == iPTO)
    load('dataFileNames.mat','dataFileName')
    load(dataFileName(iPTO))
end


%% Specify sea states to include in the table
switch SSsetType
    case 1 % all sea states
        SSset = data(iPTO).par.SSset';
    case 2
        load("randSSset_all.mat","SSset")
    case 3
        load("randSSset_top90.mat","SSset")
    case 4
        load("randSSset_top80.mat","SSset")
    case 5
        load("randSSset_bottom20.mat","SSset")
    case 6
        load("randSSset_bottom10.mat","SSset")
end

%% find design values for a given combination specified by max disp. and RO module size
switch studyType
%% 1: for studies that index data variable with PTO type and membrane area
    case 1
iiS_ro = find(S_roArray <= S_roChoice, 1,'last');
iD_wChoice = find(data(iPTO,iiS_ro).D_w(:,1) <= D_wChoice, 1,'last');
iS_roChoice = 1;

nSS = length(SSset);
D_wDesign = zeros(nSS,1);
S_roDesign = zeros(nSS,1);
P_iDesign = zeros(nSS,1);
q_perm_weighted = zeros(nSS,1);
q_perm = zeros(nSS,1);
feasible = zeros(nSS,1);
for iSS = 1:nSS
    iD_w = data(iPTO,iiS_ro).design(iD_wChoice,iS_roChoice,SSset(iSS)).iD_w;
    iS_ro = data(iPTO,iiS_ro).design(iD_wChoice,iS_roChoice,SSset(iSS)).iS_ro;
    q_perm_weighted(iSS) = data(iPTO,iiS_ro).design(iD_wChoice,iS_roChoice,SSset(iSS)).q_perm;
    q_perm(iSS) = q_perm_weighted(SSset(iSS))/(par.weight(SSset(iSS))/100);
    D_wDesign(iSS) = data(iPTO,iiS_ro).D_w(iD_w,1);
    S_roDesign(iSS) = data(iPTO,iiS_ro).S_ro(1,iS_ro);
    P_iDesign(iSS) = data(iPTO,iiS_ro).p_i(iD_w,iS_ro,SSset(iSS));
    feasible(iSS) = data(iPTO,iiS_ro).feasible(iD_w,iS_ro,SSset(iSS));
    if ~feasible(iSS)
        D_wDesign(iSS) = nan;
        S_roDesign(iSS) = nan;
        P_iDesign(iSS) = nan;
    end
end

if PTOarray(iPTO) == 2 || PTOarray(iPTO) == 4
    dutyDesign = zeros(nSS,1);
    for iSS = 1:nSS
        iD_w = data(iPTO,iiS_ro).design(iD_wChoice,iS_roChoice,SSset(iSS)).iD_w;
        iS_ro = data(iPTO,iiS_ro).design(iD_wChoice,iS_roChoice,SSset(iSS)).iS_ro;
        dutyDesign(iSS) = data(iPTO,iiS_ro).duty(iD_w,iS_ro,SSset(iSS));
        if ~feasible(iSS)
            dutyDesign(iSS) = nan;
        end
    end
end

%% 1: for studies that index data variable with PTO type
    case 2
iD_wChoice = find(data(iPTO).D_w(:,1) <= D_wChoice, 1,'last');
iS_roChoice = find(data(iPTO).S_ro(1,:) <= S_roChoice, 1,'last');

nSS = length(SSset);
D_wDesign = zeros(nSS,1);
S_roDesign = zeros(nSS,1);
P_iDesign = zeros(nSS,1);
q_perm_weighted = zeros(nSS,1);
q_perm = zeros(nSS,1);
feasible = zeros(nSS,1);
for iSS = 1:nSS
    iD_w = data(iPTO).design(iD_wChoice,iS_roChoice,SSset(iSS)).iD_w;
    iS_ro = data(iPTO).design(iD_wChoice,iS_roChoice,SSset(iSS)).iS_ro;
    q_perm_weighted(iSS) = data(iPTO).design(iD_wChoice,iS_roChoice,SSset(iSS)).q_perm;
    q_perm(iSS) = q_perm_weighted(iSS)/(par.weight(SSset(iSS))/100);
    D_wDesign(iSS) = data(iPTO).D_w(iD_w,1);
    S_roDesign(iSS) = data(iPTO).S_ro(iD_w,iS_ro);
    P_iDesign(iSS) = data(iPTO).p_i(iD_w,iS_ro,SSset(iSS));
    feasible(iSS) = data(iPTO).feasible(iD_w,iS_ro,SSset(iSS));
    if ~feasible(iSS)
        D_wDesign(iSS) = nan;
        S_roDesign(iSS) = nan;
        P_iDesign(iSS) = nan;
    end
end

if PTOarray(iPTO) == 2 || PTOarray(iPTO) == 4
    dutyDesign = zeros(nSS,1);
    for iSS = 1:nSS
        iD_w = data(iPTO).design(iD_wChoice,iS_roChoice,SSset(iSS)).iD_w;
        iS_ro = data(iPTO).design(iD_wChoice,iS_roChoice,SSset(iSS)).iS_ro;
        dutyDesign(iSS) = data(iPTO).duty(iD_w,iS_ro,SSset(iSS));
        if ~feasible(iSS)
            dutyDesign(iSS) = nan;
        end
    end
end

end

%% make table

switch PTOarray(iPTO)
    case {1 3}
        varNames = {'Sea State','Displacement (m^3/rad)','S_ro(m^2)', ...
            'Permeate Prod. (m^3/day)','Weighted Permeate Prod. (m^3/day))', ...
            'P_i (MPa)','Feasible (T/F)'};
        T_D = table(SSset,D_wDesign,S_roDesign, ...
            24*3600*q_perm,24*3600*q_perm_weighted, ...
            1e-6*P_iDesign,feasible, ...
            'VariableNames',varNames)
    case {2 4}
        varNames = {'Sea State','Displacement (m^3/rad)','S_ro (m^2)', ...
            'Permeate Prod. (m^3/day))','Weighted Permeate Prod. (m^3/day))', ...
            'P_i (MPa)','duty','Feasible (T/F)'};
        T_D = table(SSset,D_wDesign,S_roDesign, ...
            24*3600*q_perm,24*3600*q_perm_weighted, ...
            1e-6*P_iDesign,dutyDesign,feasible, ...
                    'VariableNames',varNames)
end
